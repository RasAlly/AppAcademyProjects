(()=>{var t={489:(t,e,r)=>{const n=r(375);t.exports=class{constructor(t,e){this.game=t,this.grid=e,this.handleClick=this.handleClick.bind(this),this.setupBoard(),this.bindEvents()}setupBoard(){const t=document.createElement("ul");for(let e=0;e<3;e++)for(let r=0;r<3;r++){let n=document.createElement("li");n.dataset.location=JSON.stringify([e,r]),t.append(n)}this.grid.append(t)}bindEvents(){this.grid.addEventListener("click",this.handleClick)}handleClick(t){const e=t.target;"LI"===e.nodeName&&this.makeMove(e)}makeMove(t){const e=JSON.parse(t.dataset.location),r=this.game.currentPlayer;try{this.game.playMove(e)}catch(t){alert(t.msg)}t.classList.add(r),this.game.isOver()&&(null===this.game.winner()?alert("It's a tie!"):(document.querySelectorAll(`.${r}`).forEach((t=>{t.classList.add(r+"-winner")})),this.newGameButton(),alert(`${r} has won!`)),this.grid.removeEventListener("click",this.handleClick))}newGameButton(){let t=document.createElement("input");t.type="submit",t.value="Restart Game",t.addEventListener("click",this.newGame),this.grid.append(t)}newGame(){this.game=new n,location.reload()}}},504:(t,e,r)=>{const n=r(564);class s{constructor(){this.grid=s.makeGrid()}isEmptyPos(t){if(!s.isValidPos(t))throw new n("Is not valid position!");return null===this.grid[t[0]][t[1]]}isOver(){if(null!=this.winner())return!0;for(let t=0;t<3;t++)for(let e=0;e<3;e++)if(this.isEmptyPos([t,e]))return!1;return!0}placeMark(t,e){if(!this.isEmptyPos(t))throw new n("Is not an empty position!");this.grid[t[0]][t[1]]=e}print(){const t=[];for(let e=0;e<3;e++){const r=[];for(let t=0;t<3;t++)r.push(this.grid[e][t]?this.grid[e][t]:" ");t.push(`${r.join("|")}\n`)}console.log(t.join("-----\n"))}winner(){const t=[[[0,0],[0,1],[0,2]],[[1,0],[1,1],[1,2]],[[2,0],[2,1],[2,2]],[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]],[[0,0],[1,1],[2,2]],[[2,0],[1,1],[0,2]]];for(let e=0;e<t.length;e++){const r=this.winnerHelper(t[e]);if(null!=r)return r}return null}winnerHelper(t){for(let e=0;e<s.marks.length;e++){const r=s.marks[e];let n=!0;for(let e=0;e<3;e++){const s=t[e];this.grid[s[0]][s[1]]!=r&&(n=!1)}if(n)return r}return null}static isValidPos(t){return 0<=t[0]&&t[0]<3&&0<=t[1]&&t[1]<3}static makeGrid(){const t=[];for(let e=0;e<3;e++){t.push([]);for(let r=0;r<3;r++)t[e].push(null)}return t}}s.marks=["x","o"],t.exports=s},375:(t,e,r)=>{const n=r(504),s=r(564);t.exports=class{constructor(){this.board=new n,this.currentPlayer=n.marks[0]}isOver(){return this.board.isOver()}playMove(t){this.board.placeMark(t,this.currentPlayer),this.swapTurn()}promptMove(t,e){this.board.print(),console.log(`Current Turn: ${this.currentPlayer}`),t.question("Enter rowIdx: ",(r=>{const n=parseInt(r);t.question("Enter colIdx: ",(t=>{const r=parseInt(t);e([n,r])}))}))}run(t,e){this.promptMove(t,(r=>{try{this.playMove(r)}catch(t){if(!(t instanceof s))throw t;console.log(t.msg)}this.isOver()?(this.board.print(),this.winner()?console.log(`${this.winner()} has won!`):console.log("NO ONE WINS!"),e()):this.run(t,e)}))}swapTurn(){this.currentPlayer===n.marks[0]?this.currentPlayer=n.marks[1]:this.currentPlayer=n.marks[0]}winner(){return this.board.winner()}}},564:t=>{t.exports=function(t){this.msg=t}}},e={};function r(n){var s=e[n];if(void 0!==s)return s.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}(()=>{const t=r(489),e=r(375);document.addEventListener("DOMContentLoaded",(()=>{let r=new e;const n=document.querySelector(".ttt");window.View=new t(r,n)}))})()})();